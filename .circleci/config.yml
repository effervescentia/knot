version: 2.1

defaults:
  linux_node_cache: &linux_node_cache
    key: linux_node_cache-v1-{{ checksum "yarn.lock" }}-{{ .Branch }}
  linux_node_cache_keys: &linux_node_cache_keys
    keys:
      - linux_node_cache-v1-{{ checksum "yarn.lock" }}-{{ .Branch }}
      - linux_node_cache-v1-{{ checksum "yarn.lock" }}
      - linux_node_cache-v1
  macos_node_cache: &macos_node_cache
    key: macos_node_cache-v1-{{ checksum "yarn.lock" }}-{{ .Branch }}
  macos_node_cache_keys: &macos_node_cache_keys
    keys:
      - macos_node_cache-v1-{{ checksum "yarn.lock" }}-{{ .Branch }}
      - macos_node_cache-v1-{{ checksum "yarn.lock" }}
      - macos_node_cache-v1
  linux_compiler_cache: &linux_compiler_cache
    key: linux_compiler_cache-v1-{{ checksum "compiler/esy.lock/index.json" }}-{{ .Branch }}
  linux_compiler_cache_keys: &linux_compiler_cache_keys
    keys:
      - linux_compiler_cache-v1-{{ checksum "compiler/esy.lock/index.json" }}-{{ .Branch }}
      - linux_compiler_cache-v1-{{ checksum "compiler/esy.lock/index.json" }}
      - linux_compiler_cache-v1
  macos_compiler_cache: &macos_compiler_cache
    key: macos_compiler_cache-v1-{{ checksum "compiler/esy.lock/index.json" }}-{{ .Branch }}
  macos_compiler_cache_keys: &macos_compiler_cache_keys
    keys:
      - macos_compiler_cache-v1-{{ checksum "compiler/esy.lock/index.json" }}-{{ .Branch }}
      - macos_compiler_cache-v1-{{ checksum "compiler/esy.lock/index.json" }}
      - macos_compiler_cache-v1

orbs:
  node: circleci/node@4.2.0

executors:
  node-cypress:
    docker:
      - image: cypress/base:10
        environment:
          ## this enables colors in the output
          TERM: xterm
          KNOT_BINARY: /tmp/workspace/knot/bin/knotc.exe
          NODE_OPTIONS: --max_old_space_size=4096

commands:
  restore_linux_node_cache:
    description: restore linux node cache
    steps:
      - restore_cache:
          <<: *linux_node_cache_keys
  restore_linux_compiler_cache:
    description: restore linux compiler cache
    steps:
      - restore_cache:
          <<: *linux_compiler_cache_keys
  setup_yarn:
    description: add yarn globals to the PATH
    steps:
      - run:
          name: Setup Yarn
          command: echo 'export PATH="$(yarn global bin):$PATH"' >> $BASH_ENV
  setup_esy:
    description: install esy
    steps:
      - run:
          name: Setup Esy
          command: yarn global add esy
  setup_lerna:
    description: install lerna
    steps:
      - run:
          name: Setup Lerna
          command: yarn global add lerna
  persist:
    description: persist a directory to the workspace
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Populate Workspace
          command: |
            mkdir -p /tmp/workspace
            cp -RL << parameters.from >> /tmp/workspace/<< parameters.to >>
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - << parameters.to >>
  restore_pkg:
    description: restore a built package
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Restore << parameters.from >> from Workspace
          command: |
            mv /tmp/workspace/<< parameters.from >> packages/<< parameters.to >>/build
  lerna_install:
    description: install dependencies for a particular package
    parameters:
      pkg:
        type: string
    steps:
      - run:
          name: Install
          command: lerna bootstrap --scope=@knot/<< parameters.pkg >> -- --immutable --immutable-cache
  lerna_exec:
    description: execute a command on a particular package
    parameters:
      desc:
        type: string
        default: Execute Lerna Command
      pkg:
        type: string
      command:
        type: string
    steps:
      - run:
          name: << parameters.desc >>
          command: lerna exec --scope=@knot/<< parameters.pkg >> -- << parameters.command >>
  compiler_install:
    description: use esy to install Compiler OCaml dependencies
    steps:
      - run:
          name: Install Compiler Dependencies
          working_directory: ./compiler
          command: esy install && esy pesy
  node_install:
    description: use yarn to install Node project dependencies
    steps:
      - run:
          name: Install Node Dependencies
          command: yarn install
  build_pkg:
    description: build @knot/*, run its tests and store the resulting built version
    parameters:
      pkg:
        type: string
      path:
        type: string
    steps:
      - restore_linux_node_cache
      - setup_yarn
      - setup_lerna
      - lerna_install:
          pkg: << parameters.pkg >>
      - lerna_exec:
          desc: Run Tests
          pkg: << parameters.pkg >>
          command: yarn x test.ci
      - run:
          name: Upload Coverage
          command: bash <(curl -s https://codecov.io/bash) -F << parameters.pkg >>
      - store_test_results:
          path: << parameters.path >>/reports
      - persist:
          from: << parameters.path >>/build
          to: << parameters.pkg >>
  test_bundler_plugin:
    description: run tests for bundle plugin package
    parameters:
      bundler:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Restore Compiler
          working_directory: ./packages
          command: |
            mv /tmp/workspace/compiler binaries/compiler/build
      - build_pkg:
          pkg: << parameters.bundler >>-plugin
          path: packages/plugins/bundler/<< parameters.bundler >>
  setup_test_example:
    description: run tests for example project
    parameters:
      bundler:
        type: string
      framework:
        type: string
    steps:
      - restore_linux_node_cache
      - setup_yarn
      - setup_lerna
      - lerna_install:
          pkg: << parameters.bundler >>-<< parameters.framework >>-example
      - attach_workspace:
          at: /tmp/workspace
      - setup_esy
      - restore_pkg:
          from: compiler
          to: binaries/compiler
      - restore_pkg:
          from: browser-plugin
          to: plugins/compiler/browser
      - restore_pkg:
          from: jss-plugin
          to: plugins/compiler/jss
      - restore_pkg:
          from: common
          to: plugins/common
      - restore_pkg:
          from: runtime
          to: plugins/runtime
      - restore_pkg:
          from: plugin-utils
          to: plugins/compiler/utils
      - restore_pkg:
          from: << parameters.framework >>-plugin
          to: plugins/compiler/<< parameters.framework >>
      - restore_pkg:
          from: << parameters.bundler >>-plugin
          to: plugins/bundler/<< parameters.bundler >>
  store_cypress_artifacts:
    description: store artifacts from cypress tests
    parameters:
      example:
        type: string
    steps:
      - store_artifacts:
          path: ./examples/<< parameters.example >>/cypress/screenshots
      - store_artifacts:
          path: ./examples/<< parameters.example >>/cypress/videos

jobs:
  install_node:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - restore_linux_node_cache
      - setup_yarn
      - setup_lerna
      - run:
          name: Install
          command: lerna bootstrap -- --immutable
      - save_cache:
          <<: *linux_node_cache
          paths:
            - ~/.cache/yarn
            - node_modules
            - packages/utilities/cli/node_modules
            - packages/binaries/compiler/node_modules
            - packages/plugins/bundler/webpack/node_modules
            - packages/plugins/bundler/rollup/node_modules
            - packages/plugins/bundler/browserify/node_modules
            - packages/plugins/common/node_modules
            - packages/plugins/runtime/node_modules
            - packages/plugins/compiler/browser/node_modules
            - packages/plugins/compiler/jss/node_modules
            - packages/plugins/compiler/react/node_modules
            - packages/plugins/compiler/utils/node_modules
            - packages/plugins/compiler/vue/node_modules
            - packages/examples/browserify-react/node_modules
            - packages/examples/browserify-vue/node_modules
            - packages/examples/rollup-react/node_modules
            - packages/examples/rollup-vue/node_modules
            - packages/examples/webpack-react/node_modules
            - packages/examples/webpack-vue/node_modules

  test_compiler_binary:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - restore_linux_compiler_cache
      - restore_linux_node_cache
      - setup_yarn
      - setup_esy
      - run:
          name: Install fswatch
          command: |
            sudo apt update
            sudo apt install fswatch
            sudo ln -s /usr/lib/x86_64-linux-gnu/libfswatch/libfswatch.so /usr/lib/libfswatch.so
            sudo ln -s /usr/lib/x86_64-linux-gnu/libfswatch/libfswatch.so.11 /usr/lib/libfswatch.so.11
            sudo ldconfig
      - compiler_install
      - run:
          name: Build
          working_directory: ./compiler
          command: |
            if [ -e ./_export ]; then
              esy import-build ./_export/*.tar.gz
            fi

            esy build
      - run:
          name: Test
          working_directory: ./compiler
          command: yarn test
      - run:
          name: Export Dependencies
          working_directory: ./compiler
          command: esy export-dependencies
      - save_cache:
          <<: *linux_compiler_cache
          paths:
            - ~/project/compiler/_export
      - persist:
          from: compiler/_esy/default/store/i/knot-*
          to: knot
      - store_artifacts:
          path: ~/project/compiler/_build/_tests

  test_compiler:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - restore_pkg:
          from: runtime
          to: plugins/runtime
      - build_pkg:
          pkg: compiler
          path: packages/binaries/compiler

  test_cli:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - build_pkg:
          pkg: cli
          path: packages/utilities/cli

  test_common:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - build_pkg:
          pkg: common
          path: packages/plugins/common

  test_runtime:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - build_pkg:
          pkg: runtime
          path: packages/plugins/runtime

  test_plugin_utils:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - build_pkg:
          pkg: plugin-utils
          path: packages/plugins/compiler/utils

  test_browser_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - build_pkg:
          pkg: browser-plugin
          path: packages/plugins/compiler/browser

  test_react_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - restore_pkg:
          from: common
          to: plugins/common
      - restore_pkg:
          from: plugin-utils
          to: plugins/compiler/utils
      - build_pkg:
          pkg: react-plugin
          path: packages/plugins/compiler/react

  test_vue_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - restore_pkg:
          from: common
          to: plugins/common
      - restore_pkg:
          from: plugin-utils
          to: plugins/compiler/utils
      - build_pkg:
          pkg: vue-plugin
          path: packages/plugins/compiler/vue

  test_jss_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - build_pkg:
          pkg: jss-plugin
          path: packages/plugins/compiler/jss

  test_webpack_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - test_bundler_plugin:
          bundler: webpack

  test_browserify_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - test_bundler_plugin:
          bundler: browserify

  test_rollup_plugin:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - test_bundler_plugin:
          bundler: rollup

  test_webpack_react:
    executor: node-cypress
    working_directory: ~/app
    steps:
      - checkout
      - setup_test_example:
          bundler: webpack
          framework: react
      - lerna_exec:
          pkg: webpack-react-example
          command: yarn test
      - store_cypress_artifacts:
          example: webpack-react

  test_browserify_react:
    executor: node-cypress
    working_directory: ~/app
    steps:
      - checkout
      - setup_test_example:
          bundler: browserify
          framework: react
      - lerna_exec:
          pkg: browserify-react-example
          command: yarn build
      - lerna_exec:
          pkg: browserify-react-example
          command: yarn test
      - store_cypress_artifacts:
          example: browserify-react

  test_rollup_react:
    executor: node-cypress
    working_directory: ~/app
    steps:
      - checkout
      - setup_test_example:
          bundler: rollup
          framework: react
      - lerna_exec:
          pkg: rollup-react-example
          command: yarn build
      - lerna_exec:
          pkg: rollup-react-example
          command: yarn test
      - store_cypress_artifacts:
          example: rollup-react

  test_webpack_vue:
    executor: node-cypress
    working_directory: ~/app
    steps:
      - checkout
      - setup_test_example:
          bundler: webpack
          framework: vue
      - lerna_exec:
          pkg: webpack-vue-example
          command: yarn test
      - store_cypress_artifacts:
          example: webpack-vue

  test_browserify_vue:
    executor: node-cypress
    working_directory: ~/app
    steps:
      - checkout
      - setup_test_example:
          bundler: browserify
          framework: vue
      - lerna_exec:
          pkg: browserify-vue-example
          command: yarn build
      - lerna_exec:
          pkg: browserify-vue-example
          command: yarn test
      - store_cypress_artifacts:
          example: browserify-vue

  test_rollup_vue:
    executor: node-cypress
    working_directory: ~/app
    steps:
      - checkout
      - setup_test_example:
          bundler: rollup
          framework: vue
      - lerna_exec:
          pkg: rollup-vue-example
          command: yarn build
      - lerna_exec:
          pkg: rollup-vue-example
          command: yarn test
      - store_cypress_artifacts:
          example: rollup-vue

  compile_macos:
    macos:
      xcode: "11.0.0"
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - restore_cache:
          <<: *macos_compiler_cache_keys
      - restore_cache:
          <<: *macos_node_cache_keys
      - setup_esy
      - node_install
      - compiler_install
      - run:
          name: Build Compiler
          command: yarn x build.compiler
      - persist:
          from: ./compiler/_release
          to: compiler_macos
      - save_cache:
          <<: *macos_compiler_cache
          paths:
            - ~/project/compiler/_export
      - save_cache:
          <<: *macos_node_cache
          paths:
            - ~/.cache

  compile_linux:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - restore_linux_compiler_cache
      - restore_linux_node_cache
      - setup_yarn
      - setup_esy
      - node_install
      - compiler_install
      - run:
          name: Build Compiler
          command: yarn x build.compiler
      - persist:
          from: ./compiler/_release
          to: compiler_linux

  release:
    executor:
      name: node/default
      tag: 17.6.0
    environment:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - checkout
      - restore_linux_node_cache
      - setup_yarn
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Retrieve Compiler Artifacts
          working_directory: ./packages/binaries/compiler
          command: |
            mv /tmp/workspace/compiler_macos/* platforms/macos
            mv /tmp/workspace/compiler_linux/* platforms/linux
      - node_install
      - run:
          name: Build Packages
          command: yarn x build.packages
      - run:
          name: Release
          command: yarn release

workflows:
  test_release:
    jobs:
      - install_node
      - test_compiler_binary
      - test_runtime:
          requires:
            - install_node
      - test_compiler:
          requires:
            - test_runtime
            - install_node
      - test_cli:
          requires:
            - install_node
      - test_common:
          requires:
            - install_node
      - test_plugin_utils:
          requires:
            - install_node
      - test_browser_plugin:
          requires:
            - install_node
      - test_react_plugin:
          requires:
            - test_common
            - test_plugin_utils
      - test_vue_plugin:
          requires:
            - test_common
            - test_plugin_utils
      - test_jss_plugin:
          requires:
            - test_common
      - test_webpack_plugin:
          requires:
            - test_compiler
      - test_browserify_plugin:
          requires:
            - test_compiler
      - test_rollup_plugin:
          requires:
            - test_compiler
      - test_webpack_react:
          requires:
            - test_compiler_binary
            - test_browser_plugin
            - test_react_plugin
            - test_jss_plugin
            - test_webpack_plugin
      - test_browserify_react:
          requires:
            - test_compiler_binary
            - test_browser_plugin
            - test_react_plugin
            - test_jss_plugin
            - test_browserify_plugin
      - test_rollup_react:
          requires:
            - test_compiler_binary
            - test_browser_plugin
            - test_react_plugin
            - test_jss_plugin
            - test_rollup_plugin
      - test_webpack_vue:
          requires:
            - test_compiler_binary
            - test_browser_plugin
            - test_vue_plugin
            - test_jss_plugin
            - test_webpack_plugin
      - test_browserify_vue:
          requires:
            - test_compiler_binary
            - test_browser_plugin
            - test_vue_plugin
            - test_jss_plugin
            - test_browserify_plugin
      - test_rollup_vue:
          requires:
            - test_compiler_binary
            - test_browser_plugin
            - test_vue_plugin
            - test_jss_plugin
            - test_rollup_plugin
      - compile_macos:
          requires:
            - test_webpack_react
            - test_browserify_react
            - test_rollup_react
            - test_webpack_vue
            - test_browserify_vue
            - test_rollup_vue
          filters:
            branches:
              only: master
      - compile_linux:
          requires:
            - test_webpack_react
            - test_browserify_react
            - test_rollup_react
            - test_webpack_vue
            - test_browserify_vue
            - test_rollup_vue
          filters:
            branches:
              only: master
      - release:
          requires:
            - compile_macos
            - compile_linux
          filters:
            branches:
              only: master
