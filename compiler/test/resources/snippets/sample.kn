// import ABC from "abc";

// this comment should be ignored

/*
this multi-line comment should also be ignored
*/

const numericConst = 8;
const additionConst = 1 + 10;
const subtractionConst = 8 - 2;
const multiplicationConst = 2 * 3;
const divisionConst = 4 / 2;

const stringConst = "Hello, World!";

const trueConst = true;
const falseConst = false;
const lessThanConst = 7 < 9;
const lessThanEqualConst = 8 <= 2;
const greaterThanConst = 2 > 4;
const greaterThanEqualConst = 9 >= 1;

const closureConst = (3 * 2) + (1 + 6 / (2 - 5) * 3);

// const dotAccessConst = a.b.c;

// const executionConst = d.e.f(4, a.x, 20 * 3, m());

const jsxConst = <abc />;
const jsxWithPropsConst = <def num={8 + 9} bool={false} first="look" under="there" />;
const punnedVariable = "something";
const nestedJSXConst =
  <parent justMade={"you say"}>
    <child punnedVariable>
      <grandchild under="wear" />
    </child>
    <sibling />
  </parent>;
const nestedExprJSXConst = <container>{numericConst + 20}<middle />{stringConst + "one"}</container>;
const fragmentJSXConst = <><div /><span /></>;

func compactFunc() -> 4;
func compactExprFunc() -> numericConst + subtractionConst;
func multiExprFunc() -> {
  divisionConst + multiplicationConst;
  stringConst;
}
func paramFunc(a: number) -> a;

state NoParamsState { }
state DefaultParamState (z = 30) { }
state ComplexState {
  a: boolean;

  mut setA(a1: boolean) -> {
    $a = a1;
  }
}

// view NoParamsView -> <abc></abc>;
// view NoParamsView -> { }
// view ParamView (m) -> { }
// view TypedParamView (a: boolean) -> { }
// view DefaultParamView (a = 4) -> { }
// view MultiParamView (m: boolean, a: number = 2) -> { }
/*
view InheritingView : SuperView -> {
  a + b;
  8;
}
*/
// view MixinView () ~ MyMixin -> {}
// view InheritingMixinView () : SuperView ~ MyMixin -> {}
/*
view ComplexView () : SuperView ~ MyMixin, OtherMixin -> {
  e + f;
}
*/

style ClassStyle {
  .root {
  }
}
